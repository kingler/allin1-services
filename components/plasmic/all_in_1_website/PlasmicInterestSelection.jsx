// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2zyEN4wbAvdpCs3a2xawX4
// Component: _A9MnU18kJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import Switch from "../../Switch"; // plasmic-import: dBzV6uQiV5P/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_all_in_1_website.module.css"; // plasmic-import: 2zyEN4wbAvdpCs3a2xawX4/projectcss
import sty from "./PlasmicInterestSelection.module.css"; // plasmic-import: _A9MnU18kJ/css
import InvestmentsvgIcon from "./icons/PlasmicIcon__Investmentsvg"; // plasmic-import: f24x9T9xN/icon

export const PlasmicInterestSelection__VariantProps = new Array();

export const PlasmicInterestSelection__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
);

function PlasmicInterestSelection__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <Switch
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gH88H)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <InvestmentsvgIcon
                className={classNames(projectcss.all, sty.svg__yblCd)}
                role={"img"}
              />
            ),

            value: args.slot2,
          })}

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___7BxXu)}>
              {p.renderPlasmicSlot({
                defaultContents: "Alternative Investment",
                value: args.children,
                className: classNames(sty.slotTargetChildren),
              })}

              {p.renderPlasmicSlot({
                defaultContents: "Request Invitation To Participate",
                value: args.slot,
                className: classNames(sty.slotTargetSlot),
              })}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </Switch>
  );
}

const PlasmicDescendants = {
  root: ["root"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInterestSelection__ArgProps,
      internalVariantPropNames: PlasmicInterestSelection__VariantProps,
    });

    return PlasmicInterestSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInterestSelection";
  } else {
    func.displayName = `PlasmicInterestSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicInterestSelection = Object.assign(
  // Top-level PlasmicInterestSelection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicInterestSelection
    internalVariantProps: PlasmicInterestSelection__VariantProps,
    internalArgProps: PlasmicInterestSelection__ArgProps,
  }
);

export default PlasmicInterestSelection;
/* prettier-ignore-end */
