// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2zyEN4wbAvdpCs3a2xawX4
// Component: QojEtNPl2r
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_all_in_1_website.module.css"; // plasmic-import: 2zyEN4wbAvdpCs3a2xawX4/projectcss
import sty from "./PlasmicPrimaryButton.module.css"; // plasmic-import: QojEtNPl2r/css
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: K8q3vtqtOjO/icon

export const PlasmicPrimaryButton__VariantProps = new Array();

export const PlasmicPrimaryButton__ArgProps = new Array("children");

function PlasmicPrimaryButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"a"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        sty.root
      )}
    >
      {false ? (
        <Icon7Icon
          className={classNames(projectcss.all, sty.svg__soDCy)}
          role={"img"}
        />
      ) : null}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "SUBMIT",
          value: args.children,
          className: classNames(sty.slotTargetChildren),
        })}
      </div>

      {false ? (
        <Icon7Icon
          className={classNames(projectcss.all, sty.svg___4ZkFe)}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPrimaryButton__ArgProps,
      internalVariantPropNames: PlasmicPrimaryButton__VariantProps,
    });

    return PlasmicPrimaryButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrimaryButton";
  } else {
    func.displayName = `PlasmicPrimaryButton.${nodeName}`;
  }
  return func;
}

export const PlasmicPrimaryButton = Object.assign(
  // Top-level PlasmicPrimaryButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicPrimaryButton
    internalVariantProps: PlasmicPrimaryButton__VariantProps,
    internalArgProps: PlasmicPrimaryButton__ArgProps,
  }
);

export default PlasmicPrimaryButton;
/* prettier-ignore-end */
